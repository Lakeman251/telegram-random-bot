
from flask import Flask, request
import telebot
import os
import random
import threading
import time

update_interval = 20
TOKEN = os.environ.get('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

ALLOWED_CHAT_IDS = [-1002523843565, 491842357]
active_timers = {}

def is_allowed(message):
    if message.chat.id not in ALLOWED_CHAT_IDS:
        bot.send_message(
            message.chat.id,
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö.",
            reply_to_message_id=message.message_id
        )
        return False
    return True

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not is_allowed(message): return
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /—Ä–∞–Ω–¥–æ–º 1 100, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['—Ä–∞–Ω–¥–æ–º'])
def handle_random(message):
    if not is_allowed(message): return
    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /—Ä–∞–Ω–¥–æ–º 1 100")
            return
        a, b = int(parts[1]), int(parts[2])
        result = random.randint(min(a, b), max(a, b))
        bot.reply_to(message, f"üé≤ –¢–≤–æ—ë —á–∏—Å–ª–æ: {result}")
    except:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—Ä–∞–Ω–¥–æ–º 1 100")

@bot.message_handler(commands=['—Ä'])
def handle_short_random(message):
    if not is_allowed(message): return
    handle_random(message)

@bot.message_handler(commands=['–∏–∑104'])
def handle_104(message):
    if not is_allowed(message): return
    result = random.randint(1, 104)
    bot.reply_to(message, f"üéØ –¢–≤–æ—ë —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 104: {result}")

@bot.message_handler(commands=['–∏–∑4'])
def handle_4(message):
    if not is_allowed(message): return
    result = random.randint(1, 4)
    bot.reply_to(message, f"üéØ –¢–≤–æ—ë —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4: {result}")

@bot.message_handler(commands=['–∏–∑3'])
def handle_3(message):
    if not is_allowed(message): return
    result = random.randint(1, 3)
    bot.reply_to(message, f"üéØ –¢–≤–æ—ë —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3: {result}")

@bot.message_handler(commands=['–∏–∑2'])
def handle_2(message):
    if not is_allowed(message): return
    result = random.randint(1, 2)
    bot.reply_to(message, f"üéØ –¢–≤–æ—ë —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2: {result}")

@bot.message_handler(commands=['–∫'])
def handle_commands_list(message):
    if not is_allowed(message): return
    text = (
        "üìã *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

"
        "üé≤ *–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞:*
"
        "/—Ä–∞–Ω–¥–æ–º A B ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç A –¥–æ B
"
        "/—Ä A B ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –∫–æ—Ä–æ—á–µ
"
        "/–∏–∑104 ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 104
"
        "/–∏–∑4 ‚Äî –æ—Ç 1 –¥–æ 4
"
        "/–∏–∑3 ‚Äî –æ—Ç 1 –¥–æ 3
"
        "/–∏–∑2 ‚Äî –æ—Ç 1 –¥–æ 2

"
        "‚è± *–¢–∞–π–º–µ—Ä—ã:*
"
        "/—Ç–∞–π–º–µ—Ä N ‚Äî —Ç–∞–π–º–µ—Ä (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–µ –ú:–°–°, –Ω–∞–ø—Ä–∏–º–µ—Ä: /—Ç–∞–π–º–µ—Ä 2:30)
"
        "/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ N ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –¥–æ 1 —á–∞—Å–∞)
"
        "/—Å–±—Ä–æ—Å ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä

"
        "üßæ *–ü—Ä–æ—á–µ–µ:*
"
        "/–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    bot.reply_to(message, text, parse_mode='Markdown')

@bot.message_handler(commands=['–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'])
def set_update_interval(message):
    if not is_allowed(message): return
    global update_interval
    try:
        parts = message.text.split()
        seconds = int(parts[1])
        if seconds < 5 or seconds > 3600:
            bot.reply_to(message, "‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 3600 —Å–µ–∫—É–Ω–¥.")
            return
        update_interval = seconds
        bot.reply_to(message, f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {seconds} —Å–µ–∫.")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 15 ‚Äî —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")

@bot.message_handler(commands=['—Å–±—Ä–æ—Å'])
def cancel_timer(message):
    if not is_allowed(message): return
    key = (message.chat.id, message.message_thread_id)
    active_timers[key] = False
    bot.send_message(message.chat.id, "‚ùå –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", message_thread_id=message.message_thread_id)

@bot.message_handler(commands=['—Ç–∞–π–º–µ—Ä'])
def start_timer(message):
    if not is_allowed(message): return
    try:
        parts = message.text.split()
        raw_time = parts[1]
        if ':' in raw_time:
            mins, secs = map(int, raw_time.split(':'))
            seconds = mins * 60 + secs
        else:
            seconds = int(raw_time)
        if seconds < 1:
            bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        chat_id = message.chat.id
        thread_id = message.message_thread_id
        key = (chat_id, thread_id)
        active_timers[key] = True

        bot.send_message(
            chat_id,
            f'‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {seconds // 60}:{seconds % 60:02}',
            message_thread_id=thread_id
        )

        def run_timer(total_seconds, chat_id, thread_id):
            global update_interval
            key = (chat_id, thread_id)
            while total_seconds > 0 and active_timers.get(key, False):
                sleep_time = min(update_interval, total_seconds)
                time.sleep(sleep_time)
                total_seconds -= sleep_time
                if total_seconds > 0 and active_timers.get(key, False):
                    bot.send_message(
                        chat_id,
                        f'‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {total_seconds // 60}:{total_seconds % 60:02}',
                        message_thread_id=thread_id
                    )
            if active_timers.get(key, False):
                bot.send_message(chat_id, 'üîî –¢–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–µ–Ω!', message_thread_id=thread_id)
            active_timers.pop(key, None)

        threading.Thread(
            target=run_timer,
            args=(seconds, chat_id, thread_id)
        ).start()

    except:
        bot.reply_to(message, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /—Ç–∞–π–º–µ—Ä 60 –∏–ª–∏ /—Ç–∞–π–º–µ—Ä 2:30')

@bot.message_handler(commands=['id'])
def get_chat_id(message):
    bot.reply_to(message, f"üÜî chat.id: `{message.chat.id}`", parse_mode='Markdown')

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return '', 200

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/setwebhook')
def set_webhook():
    url = f'{os.environ.get("RENDER_EXTERNAL_URL")}/{TOKEN}'
    bot.remove_webhook()
    success = bot.set_webhook(url=url)
    if success:
        return '‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
    else:
        return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook.'

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
